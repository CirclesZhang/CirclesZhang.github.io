<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>导出Nexus中maven仓库的jar包</title>
    <link href="/2023/11/21/%E5%AF%BC%E5%87%BANexus%E4%B8%ADmaven%E4%BB%93%E5%BA%93%E7%9A%84jar%E5%8C%85/"/>
    <url>/2023/11/21/%E5%AF%BC%E5%87%BANexus%E4%B8%ADmaven%E4%BB%93%E5%BA%93%E7%9A%84jar%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="导出Nexus中maven仓库的jar包"><a href="#导出Nexus中maven仓库的jar包" class="headerlink" title="导出Nexus中maven仓库的jar包"></a>导出Nexus中maven仓库的jar包</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote><p>​        浏览了网上的资料，没有完整的使用shell脚本下载maven私库jar包的案例，在这里记录下。缘由是公司maven私库迁移，想把jar包都备份一下，使用shell脚本调用nexus api 完成数据读取，并通过jq解析返回的json内容，使用curl下载对应的jar包并保存。</p></blockquote><h3 id="直接上手"><a href="#直接上手" class="headerlink" title="直接上手"></a>直接上手</h3><ol><li><strong>安装jq</strong></li></ol><p>​        jq 就像 JSON 数据的 sed，你可以用它来切片、过滤、映射和转换结构化数据，就像 sed、awk、grep 和其他朋友让你轻松处理文本一样。首先打开jq的 <a href="https://jqlang.github.io/jq/">网址</a> 下载对应的版本。我下载的是第一个AMD64的。</p><p>​        <img src="https://s2.loli.net/2023/11/21/xDLP5cHVTeW6ual.png" alt="1700552233096.png"></p><p>​        下载完成后，上传至服务器，或者能访问服务器的机子，并将jq设置进环境变量中。修改<code>vim /etc/profile</code>文件，在文件末尾添加，<code>PATH=$PATH:&#123;你上传jq文件的地址&#125; </code> ，刷新<code>source /etc/profile</code> 完成安装。可以执行下<code>jq</code> 查看输出确认是否安装成功。</p><ol start="2"><li><strong>编写shell脚本</strong></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>NEXUS_URL=&quot;你的nexus路径&quot;<br>REPO_USERNAME=&quot;你的用户名&quot;<br>REPO_PASSWORD=&quot;你的密码&quot;<br>OUTPUT_DIR_ROOT=&quot;downloaded_jars&quot;<br>SEARCH_RESULT_FILE=&quot;search_result.json&quot;<br><span class="hljs-meta prompt_"># </span><span class="language-bash">创建输出目录</span><br>mkdir -p &quot;$OUTPUT_DIR_ROOT&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">获取仓库中所有符合条件的组件</span><br>SEARCH_URL=&quot;$&#123;NEXUS_URL&#125;service/rest/v1/search/assets&quot;<br>curl -s -u &quot;$&#123;REPO_USERNAME&#125;:$&#123;REPO_PASSWORD&#125;&quot; &quot;$SEARCH_URL&quot; &gt; &quot;$SEARCH_RESULT_FILE&quot;<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">提取所有JAR包下载链接并下载</span><br>jq -c &#x27;.items[] | &#123;path: .path, downloadUrl: .downloadUrl&#125; &#x27; &quot;$SEARCH_RESULT_FILE&quot; | while IFS= read -r line; do<br>    if [ -n &quot;$line&quot; ]; then<br>        PATH_URL=$(echo &quot;$line&quot; | jq -r &#x27;.path&#x27;)<br>        DOWNLOAD_URL=$(echo &quot;$line&quot; | jq -r &#x27;.downloadUrl&#x27;)<br><br>        # echo &quot;PATH:$PATH_URL&quot;<br>        # echo &quot;DOWNLOAD_URL:$DOWNLOAD_URL&quot;<br>        OUTPUT_DIR=&quot;$OUTPUT_DIR_ROOT/$(dirname &quot;$PATH_URL&quot;)&quot;<br>        mkdir -p &quot;$OUTPUT_DIR&quot;<br><br>        FILENAME=$(basename &quot;$DOWNLOAD_URL&quot;)<br>        OUTPUT_PATH=&quot;$OUTPUT_DIR/$FILENAME&quot;<br>        echo &quot;Downloading $FILENAME...&quot;<br>        curl -u &quot;$&#123;REPO_USERNAME&#125;:$&#123;REPO_PASSWORD&#125;&quot; -o &quot;$OUTPUT_PATH&quot; &quot;$DOWNLOAD_URL&quot;<br>    fi<br>done<br><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>完成</strong></li></ol><p>​        修改对应的配置项，执行shell脚本，你的jar包就会和本地的maven仓库一样，安安静静躺在<code>OUTPUT_DIR_ROOT</code>对应的目录下，完结撒花。</p>]]></content>
    
    
    <categories>
      
      <category>运维知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
      <tag>nexus</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用shell脚本占用服务器CPU</title>
    <link href="/2023/10/12/%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%8D%A0%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8CPU/"/>
    <url>/2023/10/12/%E4%BD%BF%E7%94%A8shell%E8%84%9A%E6%9C%AC%E5%8D%A0%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8CPU/</url>
    
    <content type="html"><![CDATA[<h2 id="使用Shell脚本占用服务器CPU"><a href="#使用Shell脚本占用服务器CPU" class="headerlink" title="使用Shell脚本占用服务器CPU"></a>使用Shell脚本占用服务器CPU</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><blockquote><p>公司需要在空闲服务器实现稳定的CPU占用，实现一个无限循环的脚本，用于占用特定的CPU占用率。</p></blockquote><h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><p>​        <em>话不多说直接放脚本</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">循环脚本</span><br>endless_loop()&#123;<br>  echo -ne &quot;i=0;<br>  while true<br>  do<br>  i=i+100;<br>  i=100<br>  done&quot; | /bin/bash &amp;<br>&#125;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">输入使用的cpu核数</span><br>if [ $# != 1 ] ; then<br>  echo &quot;USAGE: $0 &lt;CPUs&gt;&quot;<br>  exit 1;<br>fi<br>for i in `seq $1`<br>do<br>  endless_loop<br><span class="hljs-meta prompt_">  pid_array[$</span><span class="language-bash">i]=$! ;</span><br>done<br><span class="hljs-meta prompt_">#</span><span class="language-bash">显示进程对应的pid</span><br>for i in &quot;$&#123;pid_array[@]&#125;&quot;; do<br>  echo &#x27;stopUsage: kill &#x27; $i &#x27;;&#x27;;<br>done<br></code></pre></td></tr></table></figure><p>​        执行的方式 <code>sh cpu_load.sh 2</code>  2为占用的核心数，根据自己的需求调整。</p><h3 id="cpu-limit介绍"><a href="#cpu-limit介绍" class="headerlink" title="cpu_limit介绍"></a>cpu_limit介绍</h3><p>​        <em>cpu_limit</em> 是一款用于控制CPU使用率的工具，参考地址 <a href="https://cpulimit.sourceforge.net/">地址</a> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">离线下载CPU_limit</span><br>wget &#x27;http://downloads.sourceforge.net/cpulimit/cpulimit-1.1.tar.gz&#x27; --no-check-certificate<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压tar 安装</span><br>tar -zxf cpulimit-1.1.tar.gz<br>cd cpulimit-1.1<br>make<br>cp cpulimit /usr/bin/<br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用方式</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制pid占用百分比</span><br>cpulimit -p 1313 -l 40<br></code></pre></td></tr></table></figure><h3 id="结合两个功能"><a href="#结合两个功能" class="headerlink" title="结合两个功能"></a>结合两个功能</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">! /bin/bash</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">写满核心数</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">限制进程号的程序使用40% cpu利用率</span><br>utilization=&quot;40&quot;<br><br>endless_loop()<br>&#123;<br>    echo -ne &quot;i=0;<br>    while true<br>    do<br>    i=i+100;<br>    i=100<br>    done&quot; | /bin/bash &amp;<br>&#125;<br><br>if [ $# != 1 ] ; then<br>  echo &quot;USAGE: $0 &lt;CPUs&gt;&quot;<br>  exit 1;<br>fi<br>for i in `seq $1`<br>do<br>  endless_loop<br><span class="hljs-meta prompt_">  pid_array[$</span><span class="language-bash">i]=$! ;</span><br>done<br><br>for i in &quot;$&#123;pid_array[@]&#125;&quot;; do<br>    echo &#x27;stopUsage: kill &#x27; $i &#x27;;&#x27;<br>    nohup cpulimit -p &quot;$i&quot; -l &quot;$utilization&quot; &amp;<br>done<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>运维知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>脚本</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>windows使用wrk实现压力测试</title>
    <link href="/2023/06/20/windows%E4%BD%BF%E7%94%A8wrk%E5%AE%9E%E7%8E%B0%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/"/>
    <url>/2023/06/20/windows%E4%BD%BF%E7%94%A8wrk%E5%AE%9E%E7%8E%B0%E5%8E%8B%E5%8A%9B%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="windows使用wrk实现QPS测试"><a href="#windows使用wrk实现QPS测试" class="headerlink" title="windows使用wrk实现QPS测试"></a>windows使用wrk实现QPS测试</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>​        公司验收之前需要测试方案中对相应接口实现压力测试并确定<code>QPS</code>，使用wrk实现简单的测试并通过windows实现应用。至于为什么使用<code>wrk</code>，因为他简单上手快，当然对比传统的<code>JMeter</code> 等来说功能没有这么多。</p><h3 id="安装wrk"><a href="#安装wrk" class="headerlink" title="安装wrk"></a>安装wrk</h3><p>​        <code>wrk</code>在windows安装有两种方案，两种都差不多，第一种是使用docker进行部署，第二种是使用windows的WSL2安装自带的Linux系统，我这边已经使用WSL2安装好了<code>Arch Linux</code>，可以参考其他文章来安装Linux，这里简单介绍下两种环境下的安装方案。</p><h4 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h4><ol><li>从 <code>GitHub</code>上下拉代码</li></ol><ol start="2"><li><p>解压缩后在 <em>wrk-master</em>中创建 <strong>Dockerfile</strong></p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> gcc<br><br><span class="hljs-keyword">COPY</span><span class="language-bash"> . /usr/src/wrk/</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /usr/src/wrk/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> \</span><br><span class="language-bash">  make</span><br><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="hljs-string">&quot;./wrk&quot;</span> ]</span><br></code></pre></td></tr></table></figure></li><li><p>根据 <strong>Dockerfile</strong> 生成镜像测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">docker 构建镜像</span><br>docker build -f .\DockerFile . -t wrk:1.1.1i<br><span class="hljs-meta prompt_"># </span><span class="language-bash">docker 启动并拿baidu测试下</span><br>docker run --rm -it wrk:1.1.1i -t1 -c1 -d30s https://www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/20/XEKJutYNZWrq38G.png" alt="image-20230620101109863.png"></p></li></ol><h4 id="使用Arch-Linux-安装"><a href="#使用Arch-Linux-安装" class="headerlink" title="使用Arch Linux 安装"></a>使用Arch Linux 安装</h4><ol><li><p>与普通的Linux 安装同理，这里演示安装最新版的wrk。</p><p>当然你也可以直接用包管理工具安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pacman -S wrk<br></code></pre></td></tr></table></figure></li><li><p>安装最新的wrk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/wg/wrk.git wrk<br>cd wrk<br>make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">将可执行文件移动到 /usr/local/bin 位置</span><br>sudo cp wrk /usr/local/bin<br></code></pre></td></tr></table></figure></li><li><p>执行测试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">wrk -t1 -c1 -d30s https://www.baidu.com<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2023/06/20/7oJ5BpPQcObvXde.png" alt="image-20230620103416205.png"></p></li></ol><h3 id="看懂wrk"><a href="#看懂wrk" class="headerlink" title="看懂wrk"></a>看懂wrk</h3><p>​        上述安装测试中已经简单展示如何使用wrk对GET接口进行测试，下面将简单介绍下wrk的命令参数</p><h4 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs shell">-c, --connections: total number of HTTP connections to keep open with<br>                   each thread handling N = connections/threads<br>  (每个线程处理N个连接总数 = 连接数 / 线程数)<br>-d, --duration:    duration of the test, e.g. 2s, 2m, 2h<br>  (测试的持续时间，例如2秒、2分钟、2小时)<br>-t, --threads:     total number of threads to use<br>  (要使用的线程总数)<br>-s, --script:      LuaJIT script, see SCRIPTING<br>  (Lua脚本信息，详情查看SCRIPTING)<br>-H, --header:      HTTP header to add to request, e.g. &quot;User-Agent: wrk&quot;<br>  (HTTP header信息添加)<br>    --latency:     print detailed latency statistics<br>  (打印详细的延迟统计信息)<br>    --timeout:     record a timeout if a response is not received within<br>                   this amount of time.<br>                   (如果在规定的时间内没有收到响应，则记录超时)<br></code></pre></td></tr></table></figure><h4 id="压测报告"><a href="#压测报告" class="headerlink" title="压测报告"></a>压测报告</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">Running 30s test @ http://127.0.0.1:8080/index.html<br>  12 threads and 400 connections<br>  Thread Stats   Avg      Stdev     Max   +/- Stdev<br>    Latency   635.91us    0.89ms  12.92ms   93.69%<br>    Req/Sec    56.20k     8.07k   62.00k    86.54%<br>  22464657 requests in 30.00s, 17.76GB read<br>Requests/sec: 748868.53<br>Transfer/sec:    606.33MB<br></code></pre></td></tr></table></figure><p><code>wrk</code>的报告包含了HTTP压力测试的结果，其中包括以下几个部分：</p><ol><li>Latency（延迟）：包括平均延迟、最小延迟、最大延迟和延迟标准差等统计信息，以及每个请求的延迟时间分布图表。</li><li>Requests/sec（每秒请求数）：每秒钟处理的请求数量。</li><li>Transfer/sec（每秒传输量）：每秒钟传输的数据量。</li><li>Socket errors（套接字错误）：测试期间发生的套接字错误数量。</li><li>Non-2xx responses（非2xx响应）：测试期间收到的非2xx响应的数量。</li></ol><blockquote><p>其中Requests/sec就是我们所需要的<code>QPS</code></p></blockquote><h3 id="使用wrk"><a href="#使用wrk" class="headerlink" title="使用wrk"></a>使用wrk</h3><h4 id="简单的POST使用"><a href="#简单的POST使用" class="headerlink" title="简单的POST使用"></a>简单的POST使用</h4><p>​        在单纯命令行中，我们单单只能测试普通的GET请求，<code>wrk</code>还提供<code>Lua</code>脚本来支持POST等复杂的请求逻辑，下面将简单展示如何使用<code>Lua</code>脚本扩展<code>wrk</code></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs lua"><span class="hljs-comment">-- wrk lua post脚本</span><br><span class="hljs-comment">-- 设置请求类型</span><br>wrk.method = <span class="hljs-string">&quot;POST&quot;</span><br><span class="hljs-comment">-- 设置请求body</span><br>wrk.body = <span class="hljs-string">&#x27;&#123;&quot;inputCoordsys&quot;:&quot;BD-09&quot;,&quot;outputCoordsys&quot;:&quot;GCJ-02&quot;,&quot;locations&quot;:[&quot;126.481499,39.994475&quot;]&#125;&#x27;</span><br><span class="hljs-comment">-- 设置请求header</span><br>wrk.headers[<span class="hljs-string">&quot;Content-Type&quot;</span>] = <span class="hljs-string">&quot;application/json&quot;</span><br></code></pre></td></tr></table></figure><p>创建<code>Lua</code>脚本，并通过<code>-s demo.lua</code>参数给<code>wrk</code>添加脚本命令，这样<code>wrk</code>将会以当前脚本执行相应的测试。</p><p>​        当然<code>Lua</code>脚本不止实现当前功能，如果我们的接口需要校验，根据<a href="https://github.com/wg/wrk/blob/master/SCRIPTING">SCRIPTING</a>文件中的介绍，结合官方的<a href="https://github.com/wg/wrk/blob/master/scripts/auth.lua">auth.lua</a>来实现我们自己的登录请求。更多花样可以自行探索 <strong>SCRIPTING</strong> 文件。</p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wrk</tag>
      
      <tag>qps</tag>
      
      <tag>测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过dockerfile构建supermap-iobject-java镜像</title>
    <link href="/2023/02/25/%E9%80%9A%E8%BF%87dockerfile%E6%9E%84%E5%BB%BAsupermap-iobject-java%E9%95%9C%E5%83%8F/"/>
    <url>/2023/02/25/%E9%80%9A%E8%BF%87dockerfile%E6%9E%84%E5%BB%BAsupermap-iobject-java%E9%95%9C%E5%83%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="通过dockerfile构建supermap-iobject-java镜像"><a href="#通过dockerfile构建supermap-iobject-java镜像" class="headerlink" title="通过dockerfile构建supermap-iobject-java镜像"></a>通过dockerfile构建supermap-iobject-java镜像</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>     通过dockerfile构建iobject-java环境，简化在Linux开发环境中安装iobject-java的繁琐过程，实现快速部署。此方案仅为实现参考，基础镜像包可以选择更小的镜像方案，还可根据自身需求修改镜像。</p><h4 id="1-dockerfile文件"><a href="#1-dockerfile文件" class="headerlink" title="1. dockerfile文件"></a>1. dockerfile文件</h4>  <figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment">#基础镜像</span><br><span class="hljs-keyword">FROM</span> java:<span class="hljs-number">8</span><br><span class="hljs-comment">#维护者信息</span><br><span class="hljs-keyword">MAINTAINER</span> xiaozhang <span class="hljs-string">&quot;xiaozhang&quot;</span><br><span class="hljs-comment"># 创建文件夹</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">set</span> -x; <span class="hljs-built_in">mkdir</span> -p /home/newjar \</span><br><span class="language-bash">            &amp;&amp; <span class="hljs-built_in">mkdir</span> -p /opt/SuperMap \</span><br><span class="language-bash">            &amp;&amp; <span class="hljs-built_in">mkdir</span> -p /opt/SuperMap/Lincense</span><br><span class="hljs-comment"># 复制文件进入</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> supermap.tar /home/</span><br><br><span class="hljs-comment">#配置环境</span><br><span class="hljs-keyword">ENV</span> JAVA_HOME /home/supermap/jre1.<span class="hljs-number">8</span><br><span class="hljs-keyword">ENV</span> SUPERMAP_ROOT /home/supermap/Support<br><span class="hljs-keyword">ENV</span> LD_LIBRARY_PATH /home/supermap/Bin:$LD_LIBRARY_PATH<br><span class="hljs-keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH<br><br><span class="hljs-comment"># 添加jar包</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> ./target/iobjectsjava-1.0.jar /home/newjar/app.jar</span><br><span class="hljs-comment"># 添加启动文件</span><br><span class="hljs-keyword">ADD</span><span class="language-bash"> service.sh /home/service.sh</span><br><span class="hljs-comment"># 启动服务</span><br><span class="hljs-keyword">CMD</span><span class="language-bash"> /home/service.sh</span><br></code></pre></td></tr></table></figure><blockquote><p>介绍： 由Java8为基础镜像搭建镜像包，复制进入的<strong>supermap.tar</strong>已<strong>supermap-iobjectsjava-11.0.1-21420-98023-linux64-all.tar.gz</strong>为基础，在Bin目录下增加缺失的<u>libgomp.so.1 </u>文件，并已经提前解压 /<strong>home/supermap/Support/aksusbd-8.31.1.tar</strong>文件,删除无关的demo文件。</p></blockquote><h4 id="2-service-sh-启动文件介绍"><a href="#2-service-sh-启动文件介绍" class="headerlink" title="2. service.sh 启动文件介绍"></a>2. service.sh 启动文件介绍</h4>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-comment"># 启动iobject</span><br><span class="hljs-built_in">cd</span> /home/supermap/Support/aksusbd-8.31.1<br>./dinst<br><span class="hljs-built_in">cd</span> /home<br><span class="hljs-comment"># API服务器脚本部署</span><br>APP_NAME=app.jar<br><span class="hljs-comment">#根据端口号查询对应的pid</span><br>pid=$(ps -ef|grep <span class="hljs-variable">$APP_NAME</span>|grep -v <span class="hljs-string">&#x27;grep&#x27;</span>|grep -v <span class="hljs-string">&#x27;tail&#x27;</span>|awk <span class="hljs-string">&#x27;&#123;print $2&#125;&#x27;</span>)<br><span class="hljs-keyword">if</span> [  -n  <span class="hljs-string">&quot;<span class="hljs-variable">$pid</span>&quot;</span>  ];  <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;关闭进程中...&quot;</span><br>    <span class="hljs-built_in">kill</span>  -9  <span class="hljs-variable">$pid</span>;<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;进程不存在...&quot;</span><br><span class="hljs-keyword">fi</span><br><br><span class="hljs-comment"># 备份日志文件</span><br>bakfile=<span class="hljs-string">&quot;_api_`date +%Y%m%d%H%M`.out&quot;</span><br><span class="hljs-comment"># 如果备份日志文件夹不存在，则创建文件夹</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;log-bak&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> log-bak<br><span class="hljs-keyword">fi</span><br><span class="hljs-keyword">if</span> [ ! -f <span class="hljs-string">&quot;_api_<span class="hljs-variable">$&#123;APP_NAME&#125;</span>.out&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;log文件不存在...&quot;</span><br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">mv</span> _api_<span class="hljs-variable">$&#123;APP_NAME&#125;</span>.out log-bak/<span class="hljs-variable">$bakfile</span><br><span class="hljs-keyword">fi</span><br><span class="hljs-comment"># 备份jar文件</span><br>bakjarfile=<span class="hljs-string">&quot;<span class="hljs-variable">$&#123;APP_NAME&#125;</span>`date +%Y%m%d%H%M`.jar&quot;</span><br><span class="hljs-keyword">if</span> [ ! -d <span class="hljs-string">&quot;jar-bak&quot;</span> ]; <span class="hljs-keyword">then</span><br>    <span class="hljs-built_in">mkdir</span> jar-bak<br><span class="hljs-keyword">fi</span><br><span class="hljs-built_in">cp</span> <span class="hljs-variable">$&#123;APP_NAME&#125;</span> jar-bak/<span class="hljs-variable">$bakjarfile</span><br><span class="hljs-built_in">cp</span> /home/newjar/<span class="hljs-variable">$&#123;APP_NAME&#125;</span> .<br><span class="hljs-comment"># 第四步：启动jar文件</span><br><span class="hljs-built_in">nohup</span> java -jar <span class="hljs-variable">$&#123;APP_NAME&#125;</span> --spring.profiles.active=prod &gt;&gt;_api_<span class="hljs-variable">$&#123;APP_NAME&#125;</span>.out &amp;<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;服务器启动完成&quot;</span><br><span class="hljs-built_in">tail</span> -f _api_<span class="hljs-variable">$&#123;APP_NAME&#125;</span>.out<br></code></pre></td></tr></table></figure><blockquote><p>介绍： 启动命令前，需先启动iobject的许可，不然无法调用有关的iobject类。剩下的是一些简单的备份启动命令。</p></blockquote><h4 id="3-docker命令"><a href="#3-docker命令" class="headerlink" title="3. docker命令"></a>3. docker命令</h4>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">构建镜像</span><br>docker build -t supermap/iobject-java:8 .<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动镜像</span><br>docker run --name iobject -p 18080:18080 \<br>            -v /home/newjar:/home/newjar \<br>            -v /opt/SuperMap/License:/opt/SuperMap/License \<br>            -d supermap/iobject-java:8<br></code></pre></td></tr></table></figure><blockquote><p>介绍： 将newjar文件夹挂载出来，避免小更新重新构建镜像。/opt/SuperMap/License为存放许可的地方，如果有可以加入。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>supermap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docker离线安装(Centos7.6)</title>
    <link href="/2022/10/25/Docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85-Centos7-6/"/>
    <url>/2022/10/25/Docker%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85-Centos7-6/</url>
    
    <content type="html"><![CDATA[<h2 id="Docker离线安装"><a href="#Docker离线安装" class="headerlink" title="Docker离线安装"></a>Docker离线安装</h2><blockquote><p>公司内网很多时候无法连通互联网，本文以 <strong>Centos 7.6.1810</strong> 为参考，记录离线安装Docker流程</p></blockquote><ol><li><p>获取Docker的安装文件</p><blockquote><p><a href="https://download.docker.com/linux/static/stable/x86_64/">https://download.docker.com/linux/static/stable/x86_64/</a></p></blockquote></li></ol><p>​    下载你需要对应版本的文件</p><p>​    <img src="https://s2.loli.net/2022/10/25/VmOZRIoGSBdnUhW.png" alt="docker版本.png"></p><ol start="2"><li><p>将下载的tgz压缩文件上传至你的Linux系统上</p><p><img src="https://s2.loli.net/2022/10/25/KbCrSH6fOVI2jsA.png" alt="上传docker.png"></p></li><li><p>执行解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf docker-20.10.20.tgz <br></code></pre></td></tr></table></figure></li><li><p>已解压文件复制到*/usr/bin/* 下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp docker/* /usr/bin/<br></code></pre></td></tr></table></figure></li><li><p>进入*/etc/systemd/system*,并创建<strong>docker.service</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /etc/systemd/system/<br>touch docker.service<br></code></pre></td></tr></table></figure></li><li><p>编辑<strong>docker.service</strong>文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vi docker.service<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 复制以下内容 配置说明参考docker官网 esc :wq保存</span><br>[Unit]<br>Description=Docker Application Container Engine<br>Documentation=https://docs.docker.com<br>After=network-online.target firewalld.service<br>Wants=network-online.target<br><br>[Service]<br>Type=notify<br><span class="hljs-comment"># the default is not to use systemd for cgroups because the delegate issues still</span><br><span class="hljs-comment"># exists and systemd currently does not support the cgroup feature set required</span><br><span class="hljs-comment"># for containers run by docker</span><br>ExecStart=/usr/bin/dockerd --selinux-enabled=<span class="hljs-literal">false</span> --insecure-registry=127.0.0.1<br>ExecReload=/bin/kill -s HUP <span class="hljs-variable">$MAINPID</span><br><span class="hljs-comment"># Having non-zero Limit*s causes performance problems due to accounting overhead</span><br><span class="hljs-comment"># in the kernel. We recommend using cgroups to do container-local accounting.</span><br>LimitNOFILE=infinity<br>LimitNPROC=infinity<br>LimitCORE=infinity<br><span class="hljs-comment"># Uncomment TasksMax if your systemd version supports it.</span><br><span class="hljs-comment"># Only systemd 226 and above support this version.</span><br><span class="hljs-comment">#TasksMax=infinity</span><br>TimeoutStartSec=0<br><span class="hljs-comment"># set delegate yes so that systemd does not reset the cgroups of docker containers</span><br>Delegate=<span class="hljs-built_in">yes</span><br><span class="hljs-comment"># kill only the docker process, not all processes in the cgroup</span><br>KillMode=process<br><span class="hljs-comment"># restart the docker process if it exits prematurely</span><br>Restart=on-failure<br>StartLimitBurst=3<br>StartLimitInterval=60s<br><br>[Install]<br>WantedBy=multi-user.target<br></code></pre></td></tr></table></figure></li><li><p>添加权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod 777 /etc/systemd/system/docker.service<br></code></pre></td></tr></table></figure></li><li><p>启动和重载命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置</span><br>systemctl daemon-reload<br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动</span><br>systemctl start docker<br><span class="hljs-meta prompt_"># </span><span class="language-bash">设置开机启动</span><br>systemctl enable docker.service<br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看docker服务状态</span><br>systemctl status docker<br></code></pre></td></tr></table></figure><p><img src="https://s2.loli.net/2022/10/25/TSUnHhjiZb6fXoe.png" alt="启动成功.png"></p></li></ol><p>​        如图所示docker <strong>启动成功</strong></p>]]></content>
    
    
    <categories>
      
      <category>软件安装</category>
      
    </categories>
    
    
    <tags>
      
      <tag>离线安装</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown 语法示例</title>
    <link href="/2022/10/21/%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/"/>
    <url>/2022/10/21/%E8%AF%AD%E6%B3%95%E7%A4%BA%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-Demo"><a href="#Markdown-Demo" class="headerlink" title="Markdown Demo"></a>Markdown Demo</h1><hr><h2 id="一、标题"><a href="#一、标题" class="headerlink" title="一、标题"></a>一、标题</h2><h3 id="1-使用-表示标题，其中-号必须在行首，例如："><a href="#1-使用-表示标题，其中-号必须在行首，例如：" class="headerlink" title="1. 使用 # 表示标题，其中 # 号必须在行首，例如："></a>1. 使用 <code>#</code> 表示标题，其中 <code>#</code> 号必须在行首，例如：</h3><h1 id="一号标题"><a href="#一号标题" class="headerlink" title="一号标题"></a>一号标题</h1><h2 id="二号标题"><a href="#二号标题" class="headerlink" title="二号标题"></a>二号标题</h2><h3 id="三号标题"><a href="#三号标题" class="headerlink" title="三号标题"></a>三号标题</h3><h4 id="四号标题"><a href="#四号标题" class="headerlink" title="四号标题"></a>四号标题</h4><h5 id="五号标题"><a href="#五号标题" class="headerlink" title="五号标题"></a>五号标题</h5><h6 id="六号标题"><a href="#六号标题" class="headerlink" title="六号标题"></a>六号标题</h6><h3 id="2-使用-或者-表示，例如："><a href="#2-使用-或者-表示，例如：" class="headerlink" title="2. 使用 === 或者 --- 表示，例如："></a>2. 使用 <code>===</code> 或者 <code>---</code> 表示，例如：</h3><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h4 id="扩展：如何换行？"><a href="#扩展：如何换行？" class="headerlink" title="扩展：如何换行？"></a><strong>扩展：如何换行？</strong></h4><p>一般使用 <strong>两个空格</strong> 加 <strong>回车</strong> 换行，不过一些 IDE 也可以直接使用回车换行。  </p><h2 id="二、分割线"><a href="#二、分割线" class="headerlink" title="二、分割线"></a>二、分割线</h2><p>使用三个或以上的 <code>-</code> 或者 <code>*</code>  表示，且这一行只有符号，<strong>注意不要被识别为二级标题即可</strong>，例如中间或者前面可以加空格</p><hr><hr><h2 id="三、斜体和粗体"><a href="#三、斜体和粗体" class="headerlink" title="三、斜体和粗体"></a>三、斜体和粗体</h2><p>使用 <code>*</code> 和 <code>**</code> 分别表示斜体和粗体，例如  </p><p><em>斜体</em><br><strong>粗体</strong><br><em><strong>又斜又粗</strong></em></p><h4 id="扩展：删除线使用两个-表示，例如"><a href="#扩展：删除线使用两个-表示，例如" class="headerlink" title="扩展：删除线使用两个 ~ 表示，例如"></a><strong>扩展：</strong>删除线使用两个 <code>~</code> 表示，例如</h4><p><del>我是要删掉的文字</del></p><hr><h2 id="四、超链接和图片"><a href="#四、超链接和图片" class="headerlink" title="四、超链接和图片"></a>四、超链接和图片</h2><p>超链接和图片的写法类似，图片仅在超链接前多了一个 <code>!</code> ，一般是 [文字描述] (链接)<br>两种写法，分别是： <a href="https://www.baidu.com/">第一种写法</a> 和 <a href="https://www.baidu.com/">第二种写法</a><br>图片的话就比如这样： <img src="https://www.zybuluo.com/static/img/logo.png" alt="Image">  </p><hr><h2 id="五、无序列表"><a href="#五、无序列表" class="headerlink" title="五、无序列表"></a>五、无序列表</h2><p>使用 <code>-</code>、<code>+</code> 和 <code>*</code> 表示无序列表，前后留一行空白，可嵌套，例如</p><ul><li>一层<ul><li>二层</li><li>二层<ul><li>三层<ul><li>四层</li></ul></li></ul></li></ul></li><li>一层</li></ul><hr><h2 id="六、有序列表"><a href="#六、有序列表" class="headerlink" title="六、有序列表"></a>六、有序列表</h2><p>使用 <code>1. </code> （点号后面有个空格）表示有序列表，可嵌套，例如</p><ol><li>一层<ol><li>二层</li><li>二层</li></ol></li><li>一层</li></ol><hr><h2 id="七、文字引用"><a href="#七、文字引用" class="headerlink" title="七、文字引用"></a>七、文字引用</h2><p>使用 <code>&gt;</code> 表示，可以有多个 <code>&gt;</code>，表示层级更深，例如</p><blockquote><p>第一层</p><blockquote><p>第二层<br>这样是跳不出去的</p><blockquote><p>还可以更深</p></blockquote></blockquote></blockquote><blockquote><p>这样就跳出去了  </p></blockquote><hr><h2 id="八、行内代码块"><a href="#八、行内代码块" class="headerlink" title="八、行内代码块"></a>八、行内代码块</h2><p>其实上面已经用过很多次了，即使用 ` 表示，例如</p><p><code>行内代码块</code></p><h3 id="扩展：很多字符是需要转义，使用反斜杠-进行转义"><a href="#扩展：很多字符是需要转义，使用反斜杠-进行转义" class="headerlink" title="扩展：很多字符是需要转义，使用反斜杠 \ 进行转义"></a>扩展：很多字符是需要转义，使用反斜杠 <code>\</code> 进行转义</h3><hr><h2 id="九、代码块"><a href="#九、代码块" class="headerlink" title="九、代码块"></a>九、代码块</h2><p>使用四个空格缩进表示代码块，例如</p><pre><code class="hljs">public class HelloWorld&#123;    public static void main(String[] args)    &#123;         System.out.println( &quot;Hello, World!&quot; );    &#125;&#125;</code></pre><p>一些 IDE 支持行数提示和着色，一般使用三个 ` 表示，例如</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span><br>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)<br>    &#123; <br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>.<span class="hljs-title function_">println</span>( <span class="hljs-string">&quot;Hello, World!&quot;</span> );<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="十、表格"><a href="#十、表格" class="headerlink" title="十、表格"></a>十、表格</h2><p>直接看例子吧，第二行的 <code>---:</code> 表示了对齐方式，默认<strong>左对齐</strong>，还有<strong>右对齐</strong>和<strong>居中</strong>  </p><table><thead><tr><th>商品</th><th align="right">数量</th><th align="center">单价</th></tr></thead><tbody><tr><td>苹果苹果苹果</td><td align="right">10</td><td align="center">$1</td></tr><tr><td>电脑</td><td align="right">1</td><td align="center">$1999</td></tr></tbody></table><hr><h2 id="十一、数学公式"><a href="#十一、数学公式" class="headerlink" title="十一、数学公式"></a>十一、数学公式</h2><p>使用 <code>$</code> 表示，其中一个 $ 表示在行内，两个 $ 表示独占一行。<br>例如质量守恒公式：$$E=mc^2$$<br>支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="https://www.zybuluo.com/static/img/logo.png">MathJax</a> 参考更多使用方法。</p><p>推荐一个常用的数学公式在线编译网站： <a href="https://www.codecogs.com/latex/eqneditor.php">https://www.codecogs.com/latex/eqneditor.php</a>  </p><hr><h2 id="十二、支持HTML标签"><a href="#十二、支持HTML标签" class="headerlink" title="十二、支持HTML标签"></a>十二、支持HTML标签</h2><h3 id="1-例如想要段落的缩进，可以如下："><a href="#1-例如想要段落的缩进，可以如下：" class="headerlink" title="1. 例如想要段落的缩进，可以如下："></a>1. 例如想要段落的缩进，可以如下：</h3><p>&nbsp;&nbsp;不断行的空白格&nbsp;或&#160;<br>&ensp;&ensp;半方大的空白&ensp;或&#8194;<br>&emsp;&emsp;全方大的空白&emsp;或&#8195;  </p><hr><h2 id="十三、其它"><a href="#十三、其它" class="headerlink" title="十三、其它"></a>十三、其它</h2><ol><li>markdown 各个 IDE 的使用可能存在大同小异，一般可以参考各个 IDE 的介绍文档</li><li>本文档介绍的内容基本适用于大部分的 IDE</li><li>其它一些类似 <strong>流程图</strong> 之类的功能，需要看 IDE 是否支持。</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/08/19/hello-world/"/>
    <url>/2022/08/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
